#define FPS_LIMIT 60

#include <iostream>
#include <thread>
#include <vector>

#include "mingl/include/mingl/mingl.h"
#include "mingl/include/mingl/gui/text.h"
#include "mingl/include/mingl/shape/line.h"
#include "mingl/include/mingl/shape/rectangle.h"


using namespace std;
vector <size_t> posWall;

nsGraphics::Vec2D rectPosJ1;
nsGraphics::Vec2D rectPosJ2;


bool collisionJoueur = false;

const unsigned Kvitesse = 2;

const int Ktaille = 640;
const nsGraphics::Vec2D PosWallY(100, 100);
const nsGraphics::Vec2D PosWallX(110, 140);

const nsGraphics::Vec2D PosWallY2(330, 120);
const nsGraphics::Vec2D PosWallX2(340, 180);
const nsGraphics::Vec2D PosWallY3(460, 300);
const nsGraphics::Vec2D PosWallX3(450, 500);
const nsGraphics::Vec2D PosWallY4(200, 400);
const nsGraphics::Vec2D PosWallX4(260, 410);

const nsGraphics::Vec2D PosWallY5(80, 300);
const nsGraphics::Vec2D PosWallX5(150, 310);
const nsGraphics::Vec2D PosWallY6(500, 100);
const nsGraphics::Vec2D PosWallX6(550, 115);
const nsGraphics::Vec2D PosWallY7(230, 540);
const nsGraphics::Vec2D PosWallX7(240, 600);


const nsGraphics::Vec2D obstacleTopLeft(300, 300);
const nsGraphics::Vec2D obstacleBottomRight(350, 350);

chrono::time_point<chrono::steady_clock> startTime;

bool areRectanglesColliding(const nsGraphics::Vec2D &rect1TopLeft, const nsGraphics::Vec2D &rect1BottomRight,
                            const nsGraphics::Vec2D &rect2TopLeft, const nsGraphics::Vec2D &rect2BottomRight)
{
    return !(rect1BottomRight.getX() <= rect2TopLeft.getX() ||  // Rectangle 1 est à gauche de Rectangle 2
             rect1TopLeft.getX() >= rect2BottomRight.getX() ||  // Rectangle 1 est à droite de Rectangle 2
             rect1BottomRight.getY() <= rect2TopLeft.getY() ||  // Rectangle 1 est au-dessus de Rectangle 2
             rect1TopLeft.getY() >= rect2BottomRight.getY());   // Rectangle 1 est en dessous de Rectangle 2
}
bool detectCollisionWithWalls(const nsGraphics::Vec2D &playerTopLeft, const nsGraphics::Vec2D &playerBottomRight)
{
    // Liste des murs (utilisez les coordonnées déjà définies pour vos murs)
    vector<pair<nsGraphics::Vec2D, nsGraphics::Vec2D>> walls = {
        {PosWallX, PosWallY},
        {PosWallX2, PosWallY2},
        {PosWallX3, PosWallY3},
        {PosWallX4, PosWallY4},
        {PosWallX5, PosWallY5},
        {PosWallX6, PosWallY6},
        {PosWallX7, PosWallY7}
    };

    // Vérifie les collisions avec tous les murs
    for (const auto &wall : walls)
    {
        if (areRectanglesColliding(playerTopLeft, playerBottomRight, wall.first, wall.second))
        {
            return true; // Collision détectée
        }
    }

    return false; // Pas de collision
}

void clavierJ1(MinGL &window)
{
    // On vérifie si ZQSD est pressé, et met à jour la position
    int posFuture;

    if (window.isPressed({'z', false})) { // Haut
        posFuture = rectPosJ1.getY() - Kvitesse;
        if (posFuture >= 0) {
            nsGraphics::Vec2D futurePos(rectPosJ1.getX(), posFuture);
            nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
            if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                rectPosJ1.setY(posFuture);
        }
    }

    if (window.isPressed({'s', false})) { // Bas
        posFuture = rectPosJ1.getY() + Kvitesse;
        if (posFuture + 20 <= Ktaille) { // 20 : hauteur du rectangle, 640 : taille de l'écran
            nsGraphics::Vec2D futurePos(rectPosJ1.getX(), posFuture);
            nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
            if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                rectPosJ1.setY(posFuture);
        }
    }

    if (window.isPressed({'q', false})) { // Gauche
        posFuture = rectPosJ1.getX() - Kvitesse;
        if (posFuture >= 0) {
            nsGraphics::Vec2D futurePos(posFuture, rectPosJ1.getY());
            nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
            if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                rectPosJ1.setX(posFuture);
        }
    }

    if (window.isPressed({'d', false})) { // Droite
        posFuture = rectPosJ1.getX() + Kvitesse;
        if (posFuture + 20 <= Ktaille) { // 20 : largeur du rectangle, 640 : taille de l'écran
            nsGraphics::Vec2D futurePos(posFuture, rectPosJ1.getY());
            nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
            if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                rectPosJ1.setX(posFuture);
        }
    }
}

void clavierJ2(MinGL &window, bool &collisionJoueur)
{
    if (!collisionJoueur)
    {
        // On vérifie si ZQSD est pressé, et met à jour la position
        int posFuture;

        if (window.isPressed({'o', false})) { // Haut
            posFuture = rectPosJ2.getY() - Kvitesse;
            if (posFuture >= 0) {
                nsGraphics::Vec2D futurePos(rectPosJ2.getX(), posFuture);
                nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
                if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                    rectPosJ2.setY(posFuture);
            }
        }

        if (window.isPressed({'l', false})) { // Bas
            posFuture = rectPosJ2.getY() + Kvitesse;
            if (posFuture + 20 <= Ktaille) { // 20 : hauteur du rectangle, 640 : taille de l'écran
                nsGraphics::Vec2D futurePos(rectPosJ2.getX(), posFuture);
                nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
                if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                    rectPosJ2.setY(posFuture);
            }
        }

        if (window.isPressed({'k', false})) { // Gauche
            posFuture = rectPosJ2.getX() - Kvitesse;
            if (posFuture >= 0) {
                nsGraphics::Vec2D futurePos(posFuture, rectPosJ2.getY());
                nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
                if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                    rectPosJ2.setX(posFuture);
            }
        }

        if (window.isPressed({'m', false})) { // Droite
            posFuture = rectPosJ2.getX() + Kvitesse;
            if (posFuture + 20 <= Ktaille) { // 20 : largeur du rectangle, 640 : taille de l'écran
                nsGraphics::Vec2D futurePos(posFuture, rectPosJ2.getY());
                nsGraphics::Vec2D futureBottomRight = futurePos + nsGraphics::Vec2D(20, 20);
                if (!detectCollisionWithWalls(futurePos, futureBottomRight))
                    rectPosJ2.setX(posFuture);
            }
        }
    }
}

unsigned randomRange (const unsigned& min, const unsigned& max) {
    return min + rand() % (max-min);
}
void Pos(){
    for (int i = 0; i < 20; ++i) {
        posWall.push_back(randomRange(10, Ktaille-40));
    }
}
void dessiner(MinGL &window, bool &collisionJoueur)
{
    // // MinGL 2 supporte l'affichage de texte sur la fenêtre assez simplement.
    // window << nsGui::Text(nsGraphics::Vec2D(20, 20), "Hello, World!", nsGraphics::KWhite);

    // // Vous pouvez aussi changer la police (parmi un choix assez limité, malheureusement).
    // window << nsGui::Text(nsGraphics::Vec2D(20, 40), "Hello, World! mais plus grand", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_9_BY_15);
    // window << nsGui::Text(nsGraphics::Vec2D(20, 60), "Hello, World! mais en Helvetica 18", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_HELVETICA_18);

    // // L'alignement vertical et horizontal peut aussi être changé.
    // window << nsShape::Line(nsGraphics::Vec2D(320, 120), nsGraphics::Vec2D(320, 220), nsGraphics::KRed);
    // window << nsShape::Line(nsGraphics::Vec2D(10, 310), nsGraphics::Vec2D(630, 310), nsGraphics::KRed);

    // window << nsGui::Text(nsGraphics::Vec2D(320, 135), "Gauche horizontalement", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_9_BY_15);
    // window << nsGui::Text(nsGraphics::Vec2D(320, 160), "Centre horizontalement", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_9_BY_15,
    //                       nsGui::Text::HorizontalAlignment::ALIGNH_CENTER);
    // window << nsGui::Text(nsGraphics::Vec2D(320, 185), "Droite horizontalement", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_9_BY_15,
    //                       nsGui::Text::HorizontalAlignment::ALIGNH_RIGHT);

    // window << nsGui::Text(nsGraphics::Vec2D(15, 310), "Bas verticalement", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_9_BY_15,
    //                       nsGui::Text::HorizontalAlignment::ALIGNH_LEFT, nsGui::Text::VerticalAlignment::ALIGNV_BOTTOM);
    // window << nsGui::Text(nsGraphics::Vec2D(200, 310), "Centre verticalement", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_9_BY_15,
    //                       nsGui::Text::HorizontalAlignment::ALIGNH_LEFT, nsGui::Text::VerticalAlignment::ALIGNV_CENTER);
    // window << nsGui::Text(nsGraphics::Vec2D(400, 310), "Haut verticalement", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_9_BY_15,
    //                       nsGui::Text::HorizontalAlignment::ALIGNH_LEFT, nsGui::Text::VerticalAlignment::ALIGNV_TOP);

    // On dessine le rectangle J1
    window << nsShape::Rectangle(rectPosJ1, rectPosJ1 + nsGraphics::Vec2D(20, 20), nsGraphics::KCyan);

    if (!collisionJoueur)
        // On dessine le rectangle J2
        window << nsShape::Rectangle(rectPosJ2, rectPosJ2 + nsGraphics::Vec2D(20, 20), nsGraphics::KRed);
    else{
        window << nsGui::Text(nsGraphics::Vec2D(20, 60), "Victoire du chasseur", nsGraphics::KWhite, nsGui::GlutFont::BITMAP_HELVETICA_18);
    }

    // Dessiner l'obstacle

    window << nsShape::Rectangle(obstacleTopLeft, obstacleBottomRight, nsGraphics::KGreen);
    window << nsShape::Rectangle(PosWallX, PosWallY, nsGraphics::KBlack);
    window << nsShape::Rectangle(PosWallX2, PosWallY2, nsGraphics::KBlack);
    window << nsShape::Rectangle(PosWallX3, PosWallY3, nsGraphics::KBlack);
    window << nsShape::Rectangle(PosWallX4, PosWallY4, nsGraphics::KBlack);
    window << nsShape::Rectangle(PosWallX5, PosWallY5, nsGraphics::KBlack);
    window << nsShape::Rectangle(PosWallX6, PosWallY6, nsGraphics::KBlack);
    window << nsShape::Rectangle(PosWallX7, PosWallY7, nsGraphics::KBlack);



}
void detectCollisionWithObstacle()
{
    string collision;
    nsGraphics::Vec2D rect1BottomRight = rectPosJ1 + nsGraphics::Vec2D(20, 20);

    // Vérifier si les rectangles se chevauchent
    if (areRectanglesColliding(rectPosJ1, rect1BottomRight, obstacleTopLeft, obstacleBottomRight))
    {
        collision = "Collision avec l'obstacle !";
    }
    else
    {
        collision = "Pas de collision avec l'obstacle !";
    }
}

bool detectCollisionEntreJoueur()
{
    string collision;
    bool collisionJoueur = false;

    // Définir les coins du rectangle mobile
    nsGraphics::Vec2D rect1BottomRight = rectPosJ1 + nsGraphics::Vec2D(20, 20);
    nsGraphics::Vec2D rect2BottomRight = rectPosJ2 + nsGraphics::Vec2D(20, 20);

    // Vérifier si les rectangles se chevauchent
    if (areRectanglesColliding(rectPosJ1, rect1BottomRight, rectPosJ2, rect2BottomRight))
    {
        collision = "Collision entre les joueurs !";
        collisionJoueur = true;
    }
    else
    {
        collision = "Pas de collision entre les joueurs !";
        collisionJoueur = false;
    }

    return collisionJoueur;
}

void actionFrame(MinGL &window)
{
    collisionJoueur = detectCollisionEntreJoueur();
    clavierJ1(window);
    clavierJ2(window, collisionJoueur);
    detectCollisionWithObstacle();

    // Calcule le temps écoulé
    auto currentTime = chrono::steady_clock::now();
    auto elapsedTime = chrono::duration_cast<chrono::seconds>(currentTime - startTime).count();

    // Affiche le temps écoulé à l'écran
    string timerText = "Temps: " + to_string(elapsedTime) + "s";
    window << nsGui::Text(nsGraphics::Vec2D(20, 50), timerText, nsGraphics::KWhite);

    // Dessiner le reste
    dessiner(window, collisionJoueur);
}
int main()
{
    Pos();
    std::cout << std::endl;
    MinGL window("MinGL", nsGraphics::Vec2D(Ktaille, Ktaille), nsGraphics::Vec2D(128, 128), nsGraphics::KGray); //Nom fenetre, Dimension fenetre, Emplacement de la fenetre au lancement
    // Initialise le système
    window.initGlut();
    window.initGraphic();

    startTime = chrono::steady_clock::now(); // Initialisation du timer

    // Variable qui tient le temps de frame
    chrono::microseconds frameTime = chrono::microseconds::zero();

    rectPosJ2.setX(0);
    rectPosJ2.setY(0);

    rectPosJ2.setX(Ktaille - 20);
    rectPosJ2.setY(Ktaille - 20);

    // On fait tourner la boucle tant que la fenêtre est ouverte
    while (window.isOpen())
    {
        // Récupère l'heure actuelle
        chrono::time_point<chrono::steady_clock> start = chrono::steady_clock::now();

        // On efface la fenêtre
        window.clearScreen();

        ////////////////////////////////////////////////////////////////////////

        actionFrame(window);

        ////////////////////////////////////////////////////////////////////////

        // On finit la frame en cours
        window.finishFrame();

        // On vide la queue d'évènements
        window.getEventManager().clearEvents();

        // On attend un peu pour limiter le framerate et soulager le CPU
        this_thread::sleep_for(chrono::milliseconds(1000 / FPS_LIMIT) - chrono::duration_cast<chrono::microseconds>(chrono::steady_clock::now() - start));

        // On récupère le temps de frame
        frameTime = chrono::duration_cast<chrono::microseconds>(chrono::steady_clock::now() - start);
    }

    return 0;
}

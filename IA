EXEMPLE UTILISATION D'IA :

#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <unordered_map>

using namespace std;

// Structure représentant un nœud (x, y)
struct Node {
    int x, y;
    float g, h, f; // Coûts: g = coût actuel, h = heuristique, f = g + h

    Node(int x, int y) : x(x), y(y), g(0), h(0), f(0) {}

    bool operator>(const Node& other) const {
        return f > other.f;
    }
};

// Fonction heuristique (distance de Manhattan)
float heuristic(const Node& a, const Node& b) {
    return abs(a.x - b.x) + abs(a.y - b.y);
}

// Fonction pour obtenir les voisins d'un nœud
vector<Node> getNeighbors(const Node& node) {
    vector<Node> neighbors;
    neighbors.push_back(Node(node.x + 1, node.y)); // droite
    neighbors.push_back(Node(node.x - 1, node.y)); // gauche
    neighbors.push_back(Node(node.x, node.y + 1)); // bas
    neighbors.push_back(Node(node.x, node.y - 1)); // haut
    return neighbors;
}

// Algorithme A* pour trouver le chemin
vector<Node> aStar(const Node& start, const Node& goal) {
    priority_queue<Node, vector<Node>, greater<Node>> openSet; // Open set (file de priorité)
    unordered_map<int, unordered_map<int, Node>> cameFrom; // Carte pour le chemin

    openSet.push(start);

    while (!openSet.empty()) {
        Node current = openSet.top();
        openSet.pop();

        if (current.x == goal.x && current.y == goal.y) {
            vector<Node> path;
            Node temp = current;
            while (cameFrom.find(temp.x) != cameFrom.end() && cameFrom[temp.x].find(temp.y) != cameFrom[temp.x].end()) {
                path.push_back(temp);
                temp = cameFrom[temp.x][temp.y];
            }
            path.push_back(start);
            return path;
        }

        for (const Node& neighbor : getNeighbors(current)) {
            float tentativeG = current.g + 1; // Coût uniforme
            if (tentativeG < neighbor.g || neighbor.g == 0) {
                neighbor.g = tentativeG;
                neighbor.h = heuristic(neighbor, goal);
                neighbor.f = neighbor.g + neighbor.h;

                openSet.push(neighbor);
                cameFrom[neighbor.x][neighbor.y] = current;
            }
        }
    }

    return {}; // Si aucun chemin n'est trouvé
}

// Affichage du chemin
void printPath(const vector<Node>& path) {
    if (path.empty()) {
        cout << "Aucun chemin trouvé!" << endl;
        return;
    }
    for (auto it = path.rbegin(); it != path.rend(); ++it) {
        cout << "(" << it->x << ", " << it->y << ")";
        if (it != path.rbegin()) cout << " -> ";
    }
    cout << endl;
}

int main() {
    Node start(0, 0);
    Node goal(4, 4);

    vector<Node> path = aStar(start, goal);
    printPath(path);

    return 0;
}
